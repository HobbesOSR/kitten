# Copyright (c) 2008, Sandia National Laboratories

# Must tack on an $O prefix to support external builds
OPROGRAMS  = $(addprefix $O/,$(PROGRAMS))
OLIBRARIES = $(addprefix $O/,$(LIBRARIES))
OHEADERS   = $(addprefix $O/,$(HEADERS))

# Install directory
OPREFIX=$(O)/$(BASE)/install

# Tack on default include paths
INCDIRS += \
	-I. \
	-I$(OPREFIX)/include \
	-I$(BASE)/../include \
	-I$O/$(BASE)/../include \
	-I$O/$(BASE)/../include2 \

# Tack on default lib paths
LIBDIRS += -L$(OPREFIX)/lib

# The default target(s)
.PHONY: all
all:: $(OPROGRAMS) $(OLIBRARIES)

# The 'make install' target
.PHONY: install
install:: $(OPROGRAMS) $(OLIBRARIES)
	@test -d $(OPREFIX)             || mkdir $(OPREFIX)
	@test -d $(OPREFIX)/bin         || mkdir $(OPREFIX)/bin
	@test -d $(OPREFIX)/lib         || mkdir $(OPREFIX)/lib
	@test -d $(OPREFIX)/include     || mkdir $(OPREFIX)/include
	@test -d $(OPREFIX)/include/lwk || mkdir $(OPREFIX)/include/lwk
	@for prog in $(OPROGRAMS); do \
		install -m 0755 $$prog $(OPREFIX)/bin; \
	done
	@for lib in $(OLIBRARIES); do \
		install -m 0644 $$lib $(OPREFIX)/lib; \
	done
	@for hdr in $(OHEADERS); do \
		install -m 0644 $$hdr $(OPREFIX)/include/$(HEADERS_SUBDIR); \
	done

#
# Template used to generate the make rule for each program
#
define PROGRAM_template
$(1)_OBJS  = $$($(1)_SOURCES:.c=.o)
$(1)_OOBJS = $$(addprefix $$O/, $$($(1)_OBJS))

# Separate out explicitly referenced libraries (e.g., ../lib/lib.a)
# so that the $O/ prefix required for external builds can be added
$(1)_LDADD_EXPLICIT  = $$(filter %.a, $$($(1)_LDADD))
$(1)_OLDADD_EXPLICIT = $$(addprefix $$O/, $$($(1)_LDADD_EXPLICIT))
$(1)_LDADD_OTHER     = $$(filter-out %.a, $$($(1)_LDADD))

# Optionally embed some raw data in the ELF executable
ifdef $(1)_RAWDATA
$(1)_OLDADD_EXPLICIT += $$O/$(1)_rawdata.o
$$O/$(1)_rawdata.o: $$($(1)_RAWDATA) $(CONFIG)
	$$(call buildrawobj,$$@,$$<,$(1)_rawdata,$O)
endif

# Rule for building the target program
$$O/$(1): $$($(1)_OOBJS) $$($(1)_OLDADD_EXPLICIT)
	$$(call buildprog,$$@,$$^ $$($(1)_LDADD_OTHER))

CLEAN_DIRS  += $$O
CLEAN_FILES += $$O/$(1) $$($(1)_OOBJS) $$O/$(1)_rawdata.o
endef


#
# Template used to generate the make rule for each library
#
define LIBRARY_template
$(1)_OBJS  = $$($(1)_SOURCES:.c=.o)
$(1)_OOBJS = $$(addprefix $$O/, $$($(1)_OBJS))

# Rule for building the target library
$$O/$(1).a: $$($(1)_OOBJS)
	$$(call buildlib,$$@,$$^)

CLEAN_DIRS  += $$O
CLEAN_FILES += $$O/$(1).a $$($(1)_OOBJS)
endef


# Generate a make rule for each target using the templates above
$(foreach prog,$(PROGRAMS),     $(eval $(call PROGRAM_template,$(prog))))
$(foreach lib, $(LIBRARIES:.a=),$(eval $(call LIBRARY_template,$(lib))))


# Delete all generated files
.PHONY: clean
clean: FORCE
	$(call build,CLEAN   $(CLEAN_DIRS),			\
		$(RM) $(CLEAN_FILES);				\
	)


#
# The build rules are modelled on the Linux style less-verbose
# build by default, but with full details if V=1 flag is
# set in the environment or on the build line.
#
# Typical usage:
#	$(call build,FOO,$filename,\
#		foo -flags $filename \
#	)
#
build = \
	@if [ "$(V)" != 1 ]; then				\
		echo "  $(subst $(srctree)/,,$(1))";		\
	else							\
		echo "$2";					\
	fi;							\
	$2

#
# Generate a library .a file from a list of object files.
# For consistency of symbol ordering, we do not use ar to do any
# updates of the library, but instead remove the old one and
# re-generate it from all of its input object files.
#
# Typical usage:
#	$(call buildlib,libfoo.a,$(FILES))
#
buildlib = \
	$(call build,AR      $1,				\
		$(RM) $1;					\
		$(AR) crs $1 $2;				\
	)

buildprog = \
	$(call build,LD      $1,				\
		$(RM) $1;					\
		$(CC) -static $(CC_LDFLAGS) $(LIBDIRS) -o $1 $2;		\
	)

buildrawobj = \
	$(call build,RAWOBJ  $1,				\
		cd $4;						\
		ln -s $2 $3;					\
		objcopy -I binary -O elf64-x86-64 		\
			--binary-architecture i386		\
			$3 $1;					\
		objcopy --rename-section .data=.rawdata $1;	\
		$(RM) $3;					\
	)

#
# Implicit rule for building .c files
#
$O/%.o: %.c $(CONFIG)
	$(call build,CC      $@,				\
		$(CC) $(CFLAGS) $(INCDIRS) -c -o $@ $<		\
	)

FORCE:
