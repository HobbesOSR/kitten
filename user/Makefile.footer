# Copyright (c) 2008, Sandia National Laboratories

# Must tack on an $O prefix to support external builds
OPROGRAMS  = $(addprefix $O/,$(PROGRAMS))
OLIBRARIES = $(addprefix $O/,$(LIBRARIES))

# The default target(s)
.PHONY: all
all:: $(OPROGRAMS) $(OLIBRARIES)


#
# Template used to generate the make rule for each program
#
define PROGRAM_template
$(1)_OBJS  = $$($(1)_SOURCES:.c=.o)
$(1)_OOBJS = $$(addprefix $$O/, $$($(1)_OBJS))

$(1)_LDADD_EXPLICIT  = $$(filter %.a, $$($(1)_LDADD))
$(1)_OLDADD_EXPLICIT = $$(addprefix $$O/, $$($(1)_LDADD_EXPLICIT))
$(1)_LDADD_OTHER     = $$(filter-out %.a, $$($(1)_LDADD))

$$O/$(1): $$($(1)_OOBJS) $$($(1)_OLDADD_EXPLICIT)
	$$(call buildprog,$$@,$$^ $$($(1)_LDADD_OTHER))

CLEAN_FILES += $$O/$(1) $$($(1)_OOBJS)
endef


#
# Template used to generate the make rule for each library
#
define LIBRARY_template
$(1)_OBJS  = $$($(1)_SOURCES:.c=.o)
$(1)_OOBJS = $$(addprefix $$O/, $$($(1)_OBJS))

$$O/$(1).a: $$($(1)_OOBJS)
	$$(call buildlib,$$@,$$^)

CLEAN_FILES += $$O/$(1).a $$($(1)_OOBJS)
endef


# Generate a make rule for each target using the templates above
$(foreach prog,$(PROGRAMS),     $(eval $(call PROGRAM_template,$(prog))))
$(foreach lib, $(LIBRARIES:.a=),$(eval $(call LIBRARY_template,$(lib))))


# Delete all generated files
.PHONY: clean
clean: FORCE
	$(call build,CLEAN   $(CLEAN_FILES),			\
		$(RM) $(CLEAN_FILES);				\
	)


#
# The build rules are modelled on the Linux style less-verbose
# build by default, but with full details if V=1 flag is
# set in the environment or on the build line.
#
# Typical usage:
#	$(call build,FOO,$filename,\
#		foo -flags $filename \
#	)
#
build = \
	@if [ "$(V)" != 1 ]; then				\
		echo '  $1';					\
	else							\
		echo "$2";					\
	fi;							\
	$2

#
# Generate a library .a file from a list of object files.
# For consistency of symbol ordering, we do not use ar to do any
# updates of the library, but instead remove the old one and
# re-generate it from all of its input object files.
#
# Typical usage:
#	$(call buildlib,libfoo.a,$(FILES))
#
buildlib = \
	$(call build,AR      $1,				\
		$(RM) $1;					\
		$(AR) crs $1 $2;				\
	)

buildprog = \
	$(call build,LD      $1,				\
		$(RM) $1;					\
		$(CC) -static -o $1 $2;				\
	)

#
# Implicit rule for building .c files
#
$O/%.o: %.c
	$(call build,CC      $@,				\
		$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $<		\
	)

FORCE:
